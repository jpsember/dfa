package dfa;

import static js.base.Tools.*;

import java.io.File;
import java.util.List;

import dfa.gen.DfaConfig;
import js.app.AppOper;
import js.base.BasePrinter;
import js.base.SystemCall;
import js.data.AbstractData;
import js.file.Files;
import js.json.JSMap;
import js.parsing.DFA;
import js.parsing.Scanner;

import static dfa.Util.*;

public class DfaOper extends AppOper {

  @Override
  public String userCommand() {
    return "dfa";
  }

  @Override
  public String shortHelp() {
    return "Compile .rxp file to .dfa";
  }

  @Override
  public AbstractData defaultArgs() {
    return DfaConfig.DEFAULT_INSTANCE;
  }

  @Override
  protected void longHelp(BasePrinter b) {
    b.pr(" \n", "\n\nExisting tokens can be included in regular expressions as $NAME or {NAME}, and");
    b.pr("can include these predefined anonymous tokens:");
    b.pr(" \n", "\n\n");
    b.pr(Files.readString(RegParse.class, "predef_expr.txt"));
  }

  @Override
  public void perform() {
    var sourceFile = config().input();
    if (Files.empty(sourceFile)) {
      app().setError("Please specify a source file (xxx.rxp)");
    }

    {
      var v = config().version();
      if (v != DFA_VERSION_3 && v != DFA_VERSION_4)
        app().setError("Unsupported version:", versionString(config().version()));
    }

    processSourceFile(sourceFile, config().output());
  }

  private void processSourceFile(File sourceFile, File targetFile) {
    sourceFile = assertExt(Files.addExtension(sourceFile, EXT_RXP), EXT_RXP);

    if (!sourceFile.exists())
      setError("No such file:", sourceFile);

    if (Files.empty(targetFile))
      targetFile = Files.setExtension(sourceFile, EXT_DFA);
    assertExt(targetFile, EXT_DFA);

    DFACompiler compiler = new DFACompiler();
    compiler.setVerbose(verbose());
    JSMap jsonMap = compiler.parse(Files.readString(sourceFile));
    String str = jsonMap.toString();
    files().writeIfChanged(targetFile, str);
    procIdsFile(compiler.tokenNames());
    processExampleText(jsonMap);
  }

  @Override
  public DfaConfig config() {
    return super.config();
  }

  /**
   * If an ids source file argument was given, write the token ids to it
   */
  private void procIdsFile(List<String> tokenNames) {
    var mIdSourceFile = config().ids();

    if (Files.empty(mIdSourceFile))
      return;

    File idFile = Files.addExtension(mIdSourceFile, "java");

    int ftype = FTYPE_JAVA;
    {
      var ext = Files.getExtension(idFile);
      if (ext.equals("rs")) {
        ftype = FTYPE_RUST;
      }
    }

    // Look for markers denoting the section of the file containing the token id constants.
    // If not found, append to the end of the file.
    //
    String marker0 = "// Token Ids generated by 'dev dfa' tool (DO NOT EDIT BELOW)\n";
    String marker1 = "// End of token Ids generated by 'dev dfa' tool (DO NOT EDIT ABOVE)\n";

    String content = Files.readString(idFile, "");
    if (content.isEmpty()) {
      log("Ids file didn't exist, creating it:", idFile);
      content = marker0 + marker1;
    }

    String beforeText = "";
    String afterText = "";

    String symbolPrefix = "T_";
    int indent = 4;
    int m0 = content.indexOf(marker0);
    int m1 = content.indexOf(marker1);
    if (m0 < 0 || m1 < 0 || m1 <= m0) {
      log("Invalid or missing markers in ids file:", idFile);
      beforeText = content;
      afterText = "";
    } else {

      {
        // Use the number of spaces that the first marker is indented to determine the indentation
        int j;
        for (j = 0;; j++) {
          int i = m0 - j - 1;
          if (i < 0 || content.charAt(i) == '\n')
            break;
        }
        indent = j;
      }

      String existingText;
      boolean success = false;
      do {
        // Look to existing first symbol to infer prefix
        existingText = content.substring(m0 + marker0.length(), m1);
        String tag;
        switch (ftype) {
        case FTYPE_JAVA: {
          tag = "static final int";
        }
          break;
        case FTYPE_RUST: {
          tag = "const";
        }
          break;

        default:
          throw badArg("Unsupported file type");
        }

        //String tag = "static final int";
        int j = existingText.indexOf(tag);
        if (j < 0)
          break;
        tag = existingText.substring(j + tag.length()).trim();
        j = tag.indexOf('\n');
        if (j > 0)
          tag = tag.substring(0, j);
        j = tag.indexOf('_');
        if (j < 0)
          symbolPrefix = "";
        else
          symbolPrefix = tag.substring(0, j + 1).trim();
        success = true;
      } while (false);
      if (!success)
        log("Can't infer prefix from:", existingText);

      beforeText = content.substring(0, m0);
      afterText = content.substring(m1 + marker1.length());
    }

    StringBuilder sb = new StringBuilder();
    sb.append(beforeText);
    sb.append(marker0);

    String tab = spaces(indent);
    int index = INIT_INDEX;
    for (String tokenName : tokenNames) {
      index++;
      sb.append(tab);

      switch (ftype) {
      case FTYPE_JAVA:
        sb.append("public static final int ");
        sb.append(symbolPrefix);
        sb.append(tokenName);
        sb.append(" = ");
        sb.append(index);
        sb.append(";\n");
        break;
      case FTYPE_RUST:
        sb.append("const ");
        sb.append(symbolPrefix);
        sb.append(tokenName);
        sb.append(": i32 = ");
        sb.append(index);
        sb.append(";\n");
        break;
      default:
        throw notSupported();
      }
    }
    sb.append(tab);
    sb.append(marker1);
    sb.append(afterText);

    files().writeIfChanged(idFile, sb.toString());
  }

  private File assertExt(File file, String ext) {
    if (!Files.getExtension(file).equals(ext))
      setError("Not a ." + ext + " file:", file);
    return file;
  }

  private void processExampleText(JSMap dfaJson) {
    var sampleTextFile = config().exampleText();
    if (Files.empty(sampleTextFile))
      return;

    sampleTextFile = sampleTextFile.getAbsoluteFile();

    var text = Files.readString(Files.assertExists(sampleTextFile, "example_text"));
    var dfa = new DFA(dfaJson);
    var firstToken = dfa.tokenName(0);
    int skip = -1;
    if (firstToken.equals("WS"))
      skip = 0;
    var s = new Scanner(dfa, text, skip);

    var sb = new BasePrinter();
    while (s.hasNext()) {
      var t = s.read();
      sb.pr(t);
    }
    var results = sb.toString();
    if (verbose())
      pr("Example text tokenization results:", DASHES, CR, results);
    var sampleResultsValidFile = new File(sampleTextFile.toString() + ".verify");
    if (!sampleResultsValidFile.exists()) {
      files().writeString(sampleResultsValidFile, results);
    } else {
      var expectedResults = Files.readString(sampleResultsValidFile);
      if (!results.equals(expectedResults)) {
        pr("*** Results have changed");
        if (config().exampleVerify()) {
          var sampleResultsInvalidFile = new File(sampleTextFile.toString() + ".invalid");
          try {
            files().writeString(sampleResultsInvalidFile, results);
            SystemCall sc = new SystemCall();
            sc.withVerbose(true);
            sc.arg("diff", sampleResultsValidFile, sampleResultsInvalidFile);
            pr(sc.systemErr());
          } finally {
            files().deletePeacefully(sampleResultsInvalidFile);
          }
        }
        setError("Example file tokenization did not produce expected results");
      }
    }
  }

}

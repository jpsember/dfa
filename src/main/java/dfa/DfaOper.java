package dfa;

import static js.base.Tools.*;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import dfa.gen.DfaConfig;
import js.app.AppOper;
import js.base.BasePrinter;
import js.base.SystemCall;
import js.data.AbstractData;
import js.file.Files;
import js.parsing.DFA;
import js.parsing.Scanner;

import static dfa.Util.*;

public class DfaOper extends AppOper {

  @Override
  public String userCommand() {
    return "dfa";
  }

  @Override
  public String shortHelp() {
    return "Compile .rxp file to .dfa";
  }

  @Override
  public AbstractData defaultArgs() {
    return DfaConfig.DEFAULT_INSTANCE;
  }

  @Override
  protected void longHelp(BasePrinter b) {
    b.pr(" \n", "\n\nExisting tokens can be included in regular expressions as $NAME, and");
    b.pr("can include these predefined anonymous tokens:");
    b.pr(" \n", "\n\n");
    b.pr(Files.readString(TokenDefinition.class, "predef_expr.txt"));
  }

  @Override
  public void perform() {
    setConfig(config());
    if (config().ascii()) {
      generateASCIITable();
      return;
    }

    var sourceFile = config().input();
    if (Files.empty(sourceFile)) {
      app().setError("Please specify a source file (xxx.rxp)");
    }

    {
      var v = config().version();
      if (!("" + v).equals("" + DFA_VERSION_5))
        app().setError("Unsupported version:", versionString(config().version()));
    }

    processSourceFile(sourceFile, config().output());
  }

  private void processSourceFile(File sourceFile, File targetFile) {
    sourceFile = assertExt(Files.addExtension(sourceFile, EXT_RXP), EXT_RXP);

    if (!sourceFile.exists())
      setError("No such file:", sourceFile);

    if (Files.empty(targetFile))
      targetFile = Files.setExtension(sourceFile, EXT_DFA);
    assertExt(targetFile, EXT_DFA);

    DFACompiler compiler = new DFACompiler();
    compiler.setVerbose(verbose());
    var dfa = compiler.parse(Files.readString(sourceFile));
    String str = dfa.toString();
    log("Size of dfa:", str.length(), "version:", config().version());
    files().writeIfChanged(targetFile, str);

    procIdsFile(dfa);
    processExampleText(dfa);
  }

  @Override
  public DfaConfig config() {
    return super.config();
  }

  /**
   * If an ids source file argument was given, write the token ids to it
   */
  private void procIdsFile(DFA dfa) {//List<String> tokenNames) {
    var mIdSourceFile = config().ids();

    if (Files.empty(mIdSourceFile))
      return;

    File idFile = Files.addExtension(mIdSourceFile, "java");

    int ftype = FTYPE_JAVA;
    {
      var ext = Files.getExtension(idFile);
      if (ext.equals("rs")) {
        ftype = FTYPE_RUST;
      }
    }

    // Look for markers denoting the section of the file containing the token id constants.
    // If not found, append to the end of the file.
    //
    String marker0 = "// Token Ids generated by 'dev dfa' tool (DO NOT EDIT BELOW)\n";
    String marker1 = "// End of token Ids generated by 'dev dfa' tool (DO NOT EDIT ABOVE)\n";

    String content = Files.readString(idFile, "");
    if (content.isEmpty()) {
      log("Ids file didn't exist, creating it:", idFile);
      content = marker0 + marker1;
    }

    String beforeText;
    String afterText;

    String symbolPrefix = "T_";
    int indent = 4;
    int m0 = content.indexOf(marker0);
    int m1 = content.indexOf(marker1);
    if (m0 < 0 || m1 < 0 || m1 <= m0) {
      log("Invalid or missing markers in ids file:", idFile);
      beforeText = content;
      afterText = "";
    } else {

      {
        // Use the number of spaces that the first marker is indented to determine the indentation
        int j;
        for (j = 0; ; j++) {
          int i = m0 - j - 1;
          if (i < 0 || content.charAt(i) == '\n')
            break;
        }
        indent = j;
      }

      String existingText;
      boolean success = false;
      do {
        // Look to existing first symbol to infer prefix
        existingText = content.substring(m0 + marker0.length(), m1);
        String tag;
        switch (ftype) {
          case FTYPE_JAVA: {
            tag = "static final int";
          }
          break;
          case FTYPE_RUST: {
            tag = "const";
          }
          break;

          default:
            throw badArg("Unsupported file type");
        }

        //String tag = "static final int";
        int j = existingText.indexOf(tag);
        if (j < 0)
          break;
        tag = existingText.substring(j + tag.length()).trim();
        j = tag.indexOf('\n');
        if (j > 0)
          tag = tag.substring(0, j);
        j = tag.indexOf('_');
        if (j < 0)
          symbolPrefix = "";
        else
          symbolPrefix = tag.substring(0, j + 1).trim();
        success = true;
      } while (false);
      if (!success)
        log("Can't infer prefix from:", existingText);

      beforeText = content.substring(0, m0);
      afterText = content.substring(m1 + marker1.length());
    }

    StringBuilder sb = new StringBuilder();
    sb.append(beforeText);
    sb.append(marker0);

    String tab = spaces(indent);

    int index = INIT_INDEX;
    for (String tokenName : dfa.tokenNames()) {
      index++;
      sb.append(tab);

      switch (ftype) {
        case FTYPE_JAVA:
          sb.append("public static final int ");
          sb.append(symbolPrefix);
          sb.append(tokenName);
          sb.append(" = ");
          sb.append(index);
          sb.append(";\n");
          break;
        case FTYPE_RUST:
          sb.append("pub(crate) const ");
          sb.append(symbolPrefix);
          sb.append(tokenName);
          sb.append(": i32 = ");
          sb.append(index);
          sb.append(";\n");
          break;
        default:
          throw notSupported();
      }
    }
    sb.append(tab);
    sb.append(marker1);
    sb.append(afterText);

    files().writeIfChanged(idFile, sb.toString());
  }

  private File assertExt(File file, String ext) {
    if (!Files.getExtension(file).equals(ext))
      setError("Not a ." + ext + " file:", file);
    return file;
  }

  private void processExampleText(DFA dfa) {
    var sampleTextFile = config().exampleText();
    if (Files.empty(sampleTextFile))
      return;

    sampleTextFile = sampleTextFile.getAbsoluteFile();

    var text = Files.readString(Files.assertExists(sampleTextFile, "example_text"));
    // var dfa = new DFA(dfaJson);
    var firstToken = dfa.tokenName(0);
    int skip = -1;
    if (firstToken.equals("WS"))
      skip = 0;
    var s = new Scanner(dfa, text, skip);

    var sb = new BasePrinter();
    while (s.hasNext()) {
      var t = s.read();
      sb.pr(t);
    }
    var results = sb.toString();
    if (verbose())
      pr("Example text tokenization results:", DASHES, CR, results);
    var sampleResultsValidFile = new File(sampleTextFile + ".verify");
    var expectedResults = "";
    if (sampleResultsValidFile.exists())
      expectedResults = Files.readString(sampleResultsValidFile);

    if (expectedResults.trim().isEmpty()) {
      files().writeString(sampleResultsValidFile, results);
    } else {
      if (!results.equals(expectedResults)) {
        pr("*** Results have changed");
        if (config().exampleVerify()) {
          var sampleResultsInvalidFile = new File(sampleTextFile + ".invalid");
          try {
            files().writeString(sampleResultsInvalidFile, results);
            SystemCall sc = new SystemCall();
            sc.withVerbose(true);
            sc.arg("diff", sampleResultsValidFile, sampleResultsInvalidFile);
            pr(sc.systemErr());
          } finally {
            files().deletePeacefully(sampleResultsInvalidFile);
          }
        }
        setError("Example file tokenization did not produce expected results");
      }
    }
  }


  private void generateASCIITable() {
    var sb = new StringBuilder();
    Map<Character, String> m = new HashMap<>();
    m.put('\b', "\\b");
    m.put('\t', "\\t|_HT");
    m.put('\n', "\\n|_LF");
    m.put('\f', "\\f|_FF");
    m.put('\r', "\\r|_CR");
    m.put(':', "|_COLON");
    m.put(' ', "|_SP");
    m.put(',', "|_COMMA");
    m.put('=', "|_EQUALS");
    m.put('\\', "|_ESCAPE");
    m.put('^', "|_TILDE");
    m.put('#', "|_HASH");

    {
      final int POS_WIDTH = 18;
      final int POS_ASCII = 5;
      final int POS_PREDEF = POS_ASCII + 3;

      for (int i = 0; i < 128; i++) {
        var ci = (char) i;
        var w = m.getOrDefault(ci, "");
        var args = split(w, '|');

        var ascii = args.get(0);
        var tokenName = "";
        if (args.size() >= 1) {
          ascii = args.get(0);
        }
        if (args.size() >= 2)
          tokenName = args.get(1);

        if (ascii.isEmpty()) {
          if (i >= 32) {
            if (i < 127) {
              ascii = Character.toString(ci);
            }
          }
        }
        var t = sb.length();

        sb.append(String.format("\\x%02x ", i));

        tab(sb, t + POS_ASCII);
        sb.append(ascii);

        tab(sb, t + POS_PREDEF);
        sb.append(tokenName);

        tab(sb, t + POS_WIDTH);
      }

      var str = sb.toString();
      String[] strs = new String[128];
      for (int i = 0; i < 128; i++) {
        strs[i] = str.substring(i * POS_WIDTH, (i + 1) * POS_WIDTH);
      }
      sb.setLength(0);
      int COLS = 4;
      int colSize = 128 / COLS;
      for (int col = 0; col < COLS; col++) {
        sb.append("ASC  Esc Tok");
        tab(sb, POS_WIDTH * (col + 1));
      }
      sb.append('\n');
      var cp = sb.length();
      for (int col = 0; col < COLS; col++) {
        sb.append("----------------");
        tab(sb, cp + POS_WIDTH * (col + 1));
      }
      sb.append('\n');


      for (int row = 0; row < colSize; row++) {
        for (int col = 0; col < COLS; col++) {
          sb.append(strs[col * colSize + row]);
        }
        sb.append('\n');
      }
      pr(sb);
    }
    for (int i = 1; i <= 127; i++) {
      sb.append(String.format("\\x%02x", i));
      sb.append(' ');
    }
  }
}
